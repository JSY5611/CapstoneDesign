buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'mysql:mysql-connector-java:8.0.27' // mysql사용시 주석처리 해제
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    runtimeOnly 'com.h2database:h2' // mysql 사용시 주석처리
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:2.7.9"
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.1'
//    implementation('org.springframework.boot:spring-boot-starter') {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//    }
    implementation 'org.yaml:snakeyaml:1.28'

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    testImplementation 'io.findify:s3mock_2.12:0.2.4'

    implementation "io.springfox:springfox-boot-starter:3.0.0"

    // junit5
    implementation "org.springframework.boot:spring-boot-starter-test"

}

jar {
    enabled = false
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

task copyPrivate(type: Copy) {
    def libDir = file("$projectDir/../../lib") // 상위 디렉토리에 있는 lib 디렉토리를 가리키도록 수정
    def resourcesDir = file("$projectDir/src/main/resources")

    from libDir
    include "*.yml"
    into resourcesDir

    println "libDir: ${libDir}"
    println "resourcesDir: ${resourcesDir}"
//     ../../lib/application.yml 파일의 spring:datasource:url 값을 출력
    doLast {
        def yamlFile = file("$libDir/application.yml")
        def yaml = new org.yaml.snakeyaml.Yaml().load(yamlFile.text)
        println "datasource url: ${yaml.spring.datasource.url}"
    }
}
